# # OpenRemote v3
# #
# # Profile for deploying the custom stack; uses deployment-data named volume
# # to expose customisations to the manager and keycloak images. To run this profile you need to specify the following
# # environment variables:
# #
# #    OR_ADMIN_PASSWORD - Initial admin user password
# #    OR_HOSTNAME - FQDN hostname of where this instance will be exposed (localhost, IP address or public domain)
# #    DEPLOYMENT_VERSION - Tag to use for deployment image (must match the tag used when building the deployment image)
# #
# # Please see openremote/profile/deploy.yml for configuration details for each service.
# #
# # To perform updates, build code and prepare Docker images:
# #
# #   ./gradlew clean installDist
# #
# # Then recreate deployment image:
# #
# #  DEPLOYMENT_VERSION=$(git rev-parse --short HEAD)
# #  MANAGER_VERSION=$(cd openremote; git rev-parse --short HEAD; cd ..)
# #  docker build -t openremote/manager:$MANAGER_VERSION ./openremote/manager/build/install/manager/
# #  docker build -t openremote/custom-deployment:$DEPLOYMENT_VERSION ./deployment/build/
# #  docker-compose -p custom down
# #  docker volume rm custom_deployment-data
# #  Do the following volume rm command if you want a clean install (wipe all existing data)
# #  docker volume rm custom_postgresql-data
# #  OR_ADMIN_PASSWORD=secret OR_HOSTNAME=my.domain.com docker-compose -p custom up -d
# #
# # All data is kept in volumes. Create a backup of the volumes to preserve data.
# #
# version: '2.4'

# volumes:
#   proxy-data:
#   deployment-data:
#   postgresql-data:
#   temp-data:

# x-logging: &awslogs
#   logging:
#     driver: awslogs
#     options:
#       awslogs-region: ${AWS_REGION:-eu-west-1}
#       awslogs-group: ${OR_HOSTNAME}
#       awslogs-create-group: 'true'
#       tag: "{{.Name}}/{{.ID}}"

# services:

#   # This service will only populate an empty volume on startup and then exit.
#   # If the volume already contains data, it exits immediately.
#   deployment:
#     image: openremote/deployment:${DEPLOYMENT_VERSION?DEPLOYMENT_VERSION must be set}
#     volumes:
#       - deployment-data:/deployment

#   proxy:
#     image: openremote/proxy:${PROXY_VERSION:-latest}
#     restart: always
#     depends_on:
#       manager:
#         condition: service_healthy
#     ports:
#       - "80:80"
#       - "443:443"
#       - "8883:8883"
#     volumes:
#       - proxy-data:/deployment
#       - deployment-data:/data
#     environment:
#       LE_EMAIL: ${OR_EMAIL_ADMIN}
#       DOMAINNAME: ${OR_HOSTNAME?OR_HOSTNAME must be set}
#       DOMAINNAMES: ${OR_ADDITIONAL_HOSTNAMES:-}
#       # USE A CUSTOM PROXY CONFIG - COPY FROM https://github.com/openremote/proxy/blob/main/haproxy.cfg
#       #HAPROXY_CONFIG: '/data/proxy/haproxy.cfg'
#     <<: *awslogs

#   postgresql:
#     image: openremote/postgresql:${POSTGRESQL_VERSION:-latest}
#     restart: always
#     volumes:
#       - postgresql-data:/var/lib/postgresql/data
#       - temp-data:/tmp
#     <<: *awslogs

#   keycloak:
#     image: openremote/keycloak:${KEYCLOAK_VERSION:-latest}
#     restart: always
#     depends_on:
#       postgresql:
#         condition: service_healthy
#     volumes:
#       - deployment-data:/deployment
#     environment:
#       KEYCLOAK_PASSWORD: ${OR_ADMIN_PASSWORD:?OR_ADMIN_PASSWORD must be set}
#       KEYCLOAK_FRONTEND_URL: https://${OR_HOSTNAME?OR_HOSTNAME must be set}/auth
#     <<: *awslogs

#   manager:
#     image: openremote/manager:${MANAGER_VERSION:-latest}
#     restart: always
#     logging:
#       options:
#         max-size: "10m"
#         max-file: "10"
#     depends_on:
#       keycloak:
#         condition: service_healthy
#     volumes:
#       - temp-data:/tmp
#       - deployment-data:/deployment
#       # Map data should be stored local on host
#       - /deployment.local:/deployment.local
#     environment:
#       # Here are some typical environment variables you want to set
#       # see openremote/profile/deploy.yml for details
#       OR_ADMIN_PASSWORD: ${OR_ADMIN_PASSWORD?OR_ADMIN_PASSWORD must be set}
#       OR_SETUP_TYPE: # Typical values to support are staging and production
#       OR_SETUP_RUN_ON_RESTART:
#       OR_EMAIL_HOST:
#       OR_EMAIL_USER:
#       OR_EMAIL_PASSWORD:
#       OR_EMAIL_X_HEADERS:
#       OR_EMAIL_FROM:
#       OR_EMAIL_ADMIN:
#       OR_HOSTNAME: ${OR_HOSTNAME?OR_HOSTNAME must be set}
#       OR_ADDITIONAL_HOSTNAMES: ${OR_ADDITIONAL_HOSTNAMES:-}
#       OR_SSL_PORT: ${OR_SSL_PORT:-443}
#       OR_DEV_MODE: ${OR_DEV_MODE:-false}
#       KEYCLOAK_FRONTEND_URL: https://${OR_HOSTNAME:-localhost}/auth
#       #OR_MAP_TILES_PATH: '/deployment.local/efs/mapdata.mbtiles'
#     <<: *awslogs

# networks:
#   default:
#     ipam:
#       config:
#         - subnet: 172.31.0.0/16


# OpenRemote v3
#
# Profile that runs the stack by default on https://localhost using a self-signed SSL certificate,
# but optionally on https://$OR_HOSTNAME with an auto generated SSL certificate from Letsencrypt.
#
# It is configured to use the AWS logging driver.
#
version: '2.4'

volumes:
  proxy-data:
  temp-data:
  postgresql-data:
  btmesh-data:
  deployment:
  airquality:

services:

  web:
    restart: always
    build:
      context: ./customserver/
      dockerfile: Dockerfile
    ports:
      - "8182:8080"
    depends_on:
      - browserless
    volumes:
      - airquality:/customserver/server/tmp
  browserless:
    restart: always
    image: browserless/chrome:latest
    ports:
      - "3000:3000"


  proxy:
    # extends:
    #   file: ./openremote/profile/deploy.yml
    #   service: proxy
    image: openremote/proxy:${PROXY_VERSION:-latest}
    restart: always
    depends_on:
      manager:
        condition: service_healthy
    ports:
      - "80:80"
      - "${OR_SSL_PORT:-443}:443"
      - "8883:8883"
    volumes:
      - proxy-data:/deployment
    environment:
      LE_EMAIL: ${OR_EMAIL_ADMIN:-}
      DOMAINNAME: ${OR_HOSTNAME:-localhost}
      DOMAINNAMES: ${OR_ADDITIONAL_HOSTNAMES:-}
      # USE A CUSTOM PROXY CONFIG - COPY FROM https://github.com/openremote/proxy/blob/main/haproxy.cfg
      #HAPROXY_CONFIG: '/data/proxy/haproxy.cfg'

  postgresql:
    extends:
      file: ./openremote/profile/deploy.yml
      service: postgresql
    restart: always
    image: openremote/postgresql:${POSTGRESQL_VERSION:-latest}
    volumes:
      - postgresql-data:/var/lib/postgresql/data
      - temp-data:/tmp
    ports:
      - "5432:5432"

  keycloak:
    extends:
      file: ./openremote/profile/deploy.yml
      service: keycloak
    restart: always
    ports:
      - "8081:8080"
    image: openremote/keycloak:${KEYCLOAK_VERSION:-latest}
    depends_on:
      postgresql:
        condition: service_healthy
    volumes:
      - ./deployment:/deployment
      # - ./deployment/keycloak/themes:/deployment/keycloak/themes
      # - ./openremote/profile/disable-theme-cache.cli:/opt/jboss/startup-scripts/disable-theme-cache.cli
    environment:
      # KEYCLOAK_PASSWORD: ${OR_ADMIN_PASSWORD:-secret}
      # KEYCLOAK_FRONTEND_URL: https://${OR_HOSTNAME:-localhost}/auth
      KC_HOSTNAME: $OR_HOSTNAME
      KC_HOSTNAME_PORT: -1
      KEYCLOAK_ADMIN_PASSWORD: secret
      KEYCLOAK_ACCOUNT_THEME: customopenremote
      KEYCLOAK_DEFAULT_THEME: customopenremote
      # Use the following if OR_SSL_PORT is not the default 443
      #KEYCLOAK_FRONTEND_URL: https://${OR_HOSTNAME:-localhost}:${OR_SSL_PORT:-443}/auth

  manager:
#    privileged: true
    restart: always
    image: openremote/manager:${MANAGER_VERSION:-latest}
    depends_on:
      keycloak:
        condition: service_healthy
    links:
      - web
    environment:
      # OR_EMAIL_USER:
      # OR_EMAIL_PASSWORD:
      # OR_EMAIL_X_HEADERS:
      # OR_EMAIL_FROM:
      # OR_EMAIL_ADMIN:
      OR_HOSTNAME: ${OR_HOSTNAME:-localhost}
      OR_ADDITIONAL_HOSTNAMES: ${OR_ADDITIONAL_HOSTNAMES:-}
      OR_SSL_PORT: ${OR_SSL_PORT:-443}
      OR_DEV_MODE: ${OR_DEV_MODE:-false}
      KEYCLOAK_FRONTEND_URL: https://${OR_HOSTNAME:-localhost}/auth
      # Use the following if OR_SSL_PORT is not the default 443
      #KEYCLOAK_FRONTEND_URL: https://${OR_HOSTNAME:-localhost}:${OR_SSL_PORT:-443}/auth

      # The following variables will configure the demo
      # OR_FORECAST_SOLAR_API_KEY:
      # OR_OPEN_WEATHER_API_APP_ID:
      # OR_SETUP_IMPORT_DEMO_AGENT_KNX:
      # OR_SETUP_IMPORT_DEMO_AGENT_VELBUS:
    volumes:
      - temp-data:/tmp
      - ./deployment/:/deployment
#      - /var/run/dbus:/var/run/dbus
#      - btmesh-data:/btmesh
#   devices:
#     - /dev/ttyACM0:/dev/ttyS0

networks:
  default:
    ipam:
      config:
        - subnet: 172.31.0.0/16

